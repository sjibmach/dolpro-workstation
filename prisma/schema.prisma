generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// ----------------------
// Stammdaten
// ----------------------

model Language {
    id           String                @id @default(cuid())
    name         String
    interpreters InterpreterLanguage[]
    jobsFrom     Job[]                 @relation("JobFromLanguage")
    jobsTo       Job[]                 @relation("JobToLanguage")

    @@map("languages")
}

model City {
    id                    String                     @id @default(cuid())
    name                  String
    interpretersPreferred InterpreterPreferredCity[]
    jobs                  Job[]
    clients               Client[]

    @@map("cities")
}

model AssignmentType {
    id   String @id @default(cuid())
    name String
    jobs Job[]

    @@map("assignment_types")
}

model JobType {
    id   String @id @default(cuid())
    name String
    jobs Job[]

    @@map("job_types")
}

model JobPriority {
    id   String @id @default(cuid())
    name String
    jobs Job[]

    @@map("job_priorities")
}

// ----------------------
// Users
// ----------------------

model User {
    id      String       @id @default(cuid())
    email   String       @unique
    name    String
    clients ClientNote[]

    @@map("users")
}

// ----------------------
// Auftraggeber (Clients)
// ----------------------

model Client {
    id                 String              @id @default(cuid())
    name               String
    typeId             String
    type               ClientType          @relation(fields: [typeId], references: [id])
    statusId           String?
    status             ClientStatus?       @relation(fields: [statusId], references: [id])
    statusReasonId     String?
    statusReason       ClientStatusReason? @relation(fields: [statusReasonId], references: [id])
    statusFollowUpDate DateTime?
    email              String?
    phone              String?
    contactName        String?
    contactEmail       String?
    contactPhone       String?
    position           String?
    address            String?
    zip                String?
    cityId             String?
    city               City?               @relation(fields: [cityId], references: [id])
    invoiceAddress     String?
    invoiceZip         String?
    invoiceCity        String?
    notes              String?
    creatorId          String?
    updatorId          String?
    createdAt          DateTime            @default(now())
    updatedAt          DateTime            @updatedAt
    jobs               Job[]
    notesHistory       ClientNote[]

    @@map("clients")
}

model ClientStatus {
    id      String   @id @default(cuid())
    name    String
    clients Client[]

    @@map("client_statuses")
}

model ClientStatusReason {
    id        String   @id @default(cuid())
    name      String
    active    Boolean  @default(true)
    sortOrder Int
    clients   Client[]

    @@map("client_status_reasons")
}

model ClientNote {
    id           String    @id @default(cuid())
    clientId     String
    client       Client    @relation(fields: [clientId], references: [id])
    userId       String
    user         User      @relation(fields: [userId], references: [id])
    type         String
    content      String
    nextStepDate DateTime?
    createdAt    DateTime  @default(now())

    @@map("client_notes")
}

model ClientType {
    id      String   @id @default(cuid())
    name    String
    clients Client[]

    @@map("client_types")
}

// ----------------------
// Dolmetscher (Interpreters)
// ----------------------

model Interpreter {
    id                String                     @id @default(cuid())
    code              String                     @unique
    codeNumber        Int                        @unique
    firstName         String
    lastName          String
    email             String?
    phone             String?
    gender            String?
    birthDate         DateTime?
    address           String?
    zip               String?
    city              String?
    offersRemote      Boolean
    offersOnSite      Boolean
    defaultHourlyRate Float?
    availability      String?
    iban              String?
    startDate         DateTime?
    endDate           DateTime?
    interviewDate     DateTime?
    googleContactId   String?
    googleEventId     String?
    statusId          String
    status            InterpreterStatus          @relation(fields: [statusId], references: [id])
    notes             String?
    createdAt         DateTime                   @default(now())
    updatedAt         DateTime                   @updatedAt
    preferredCities   InterpreterPreferredCity[]
    languages         InterpreterLanguage[]
    jobs              Job[]

    @@map("interpreters")
}

model InterpreterStatus {
    id           String        @id @default(cuid())
    name         String
    interpreters Interpreter[]

    @@map("interpreter_statuses")
}

model InterpreterPreferredCity {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    cityId        String
    city          City        @relation(fields: [cityId], references: [id])

    @@map("interpreter_preferred_cities")
}

model InterpreterLanguage {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    languageId    String
    language      Language    @relation(fields: [languageId], references: [id])

    @@map("interpreter_languages")
}

// ----------------------
// Auftr√§ge (Jobs)
// ----------------------

model Job {
    id               String         @id @default(cuid())
    clientId         String
    client           Client         @relation(fields: [clientId], references: [id])
    interpreterId    String?
    interpreter      Interpreter?   @relation(fields: [interpreterId], references: [id])
    languageFromId   String
    languageFrom     Language       @relation("JobFromLanguage", fields: [languageFromId], references: [id])
    languageToId     String
    languageTo       Language       @relation("JobToLanguage", fields: [languageToId], references: [id])
    assignmentTypeId String
    assignmentType   AssignmentType @relation(fields: [assignmentTypeId], references: [id])
    jobTypeId        String
    jobType          JobType        @relation(fields: [jobTypeId], references: [id])
    priorityId       String
    priority         JobPriority    @relation(fields: [priorityId], references: [id])
    jobStatusId      String
    status           JobStatus      @relation(fields: [jobStatusId], references: [id])
    description      String?
    date             DateTime
    startTime        DateTime
    endTime          DateTime
    durationMinutes  Int
    mode             String
    street           String?
    zip              String?
    cityId           String
    city             City           @relation(fields: [cityId], references: [id])
    fee              Float?
    interpreterFee   Float?
    notes            String?
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt

    @@map("jobs")
}

model JobStatus {
    id   String @id @default(cuid())
    name String
    jobs Job[]

    @@map("job_statuses")
}
