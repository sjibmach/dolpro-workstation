generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// ----------------------
// Stammdaten
// ----------------------

model Language {
    id           String                @id @default(cuid())
    name         String
    active       Boolean               @default(true)
    sortIndex    Int?
    interpreters InterpreterLanguage[]
    jobsTo       Job[]                 @relation("JobToLanguage")

    @@map("languages")
}

model City {
    id                    String                     @id @default(cuid())
    name                  String
    active                Boolean                    @default(true)
    sortIndex             Int?
    interpreters          Interpreter[]
    interpretersPreferred InterpreterPreferredCity[]
    jobs                  Job[]
    clients               Client[]
    clientContactpersons  ClientContactperson[]
    jobContactpersons     JobContactperson[]

    @@map("cities")
}

model JobType {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_types")
}

enum JobPriorityId {
    high
    medium
    low
}

model JobPriority {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_priorities")
}

// ----------------------
// Users
// ----------------------

model User {
    id                     String          @id @default(cuid())
    salutation             String?
    firstName              String?
    lastName               String
    email                  String          @unique
    createdClients         Client[]        @relation("CreatedClients")
    updatedClients         Client[]        @relation("UpdatedClients")
    creatorClientHistories ClientHistory[] @relation("CreatorClientHistories")
    updatorClientHistories ClientHistory[] @relation("UpdatorClientHistories")

    @@map("users")
}

// ----------------------
// Auftraggeber (Clients)
// ----------------------

model Client {
    id                 String                @id @default(cuid())
    name               String
    code               String?
    codeNumber         Int?
    nameShortcut       String?
    typeId             String
    type               ClientType            @relation(fields: [typeId], references: [id])
    statusId           String?
    status             ClientStatus?         @relation(fields: [statusId], references: [id])
    statusReasonId     String?
    statusReason       ClientStatusReason?   @relation(fields: [statusReasonId], references: [id])
    statusFollowUpDate DateTime?
    email              String?
    phone              String?
    street             String?
    zip                String?
    cityId             String?
    city               City?                 @relation(fields: [cityId], references: [id])
    notes              String?
    jobs               Job[]
    contactPersons     ClientContactperson[]
    clientHistory      ClientHistory[]

    creatorId String?
    creator   User?    @relation("CreatedClients", fields: [creatorId], references: [id])
    updatorId String?
    updator   User?    @relation("UpdatedClients", fields: [updatorId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("clients")
}

enum ClientStatusId {
    new
    contacting
    failedContact
    interested
    offerToSend
    offerSent
    negotiation
    contactLater
    activeWithoutContract
    contracted
    inactive
    notInterested
    blacklisted
}

enum ClientStatusEnum {
    new // Neu – noch kein Kontakt
    contacting // Kontaktaufnahme läuft
    failedContact // Kontaktaufnahme erfolglos
    interested // Interessiert – weitere Gespräche geplant
    offerToSend // Angebot senden
    offerSent // Angebot verschickt
    negotiation // Vertragsverhandlung
    contactLater // Später erneut kontaktieren
    activeWithoutContract // Zusammenarbeit ohne Vertrag
    contracted // Zusammenarbeit mit Vertrag
    inactive // Inaktiv – aktuell keine Zusammenarbeit
    notInterested // Kein Interesse
    blacklisted // Nicht weiter kontaktieren (gesperrt)
}

model ClientStatus {
    id            String          @id @default(cuid())
    name          String
    sortIndex     Int?
    active        Boolean         @default(true)
    clients       Client[]
    clientHistory ClientHistory[]

    @@map("client_statuses")
}

enum ClientStatusReasonEnum {
    noNeed // Kein Bedarf
    hasPartner // Bereits fester Partner
    tooExpensive // Zu teuer
    usesInternal // Nutzt interne Lösung
    tooComplicated // Ablauf zu kompliziert
    contractIssues // Vertragsbedingungen unpassend
    privacyConcerns // Datenschutzbedenken
    badCommunication // Kommunikation unzureichend
    noOnline // Möchte nur in Präsenz – kein Online
    badPayment // Schlechte Zahlungsmoral / Zahlungsverzug
    rude // Unfreundlicher Umgangston
    unethical // Diskriminierendes oder unethisches Verhalten
}

model ClientStatusReason {
    id            String          @id @default(cuid())
    name          String
    active        Boolean         @default(true)
    sortIndex     Int?
    clients       Client[]
    clientHistory ClientHistory[]

    @@map("client_status_reasons")
}

model ClientType {
    id        String   @id @default(cuid())
    name      String
    active    Boolean  @default(true)
    sortIndex Int?
    clients   Client[]

    @@map("client_types")
}

model ClientContactperson {
    id         String  @id @default(cuid())
    clientId   String
    client     Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
    salutation String?
    firstName  String?
    lastName   String
    street     String?
    zip        String?
    cityId     String?
    city       City?   @relation(fields: [cityId], references: [id])
    phone      String?
    email      String?

    @@map("client_contactpersons")
}

enum ClientHistoryType {
    note
    statusChange
    fieldChange
}

model ClientHistory {
    id       String @id @default(cuid())
    clientId String
    client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

    newStatusId  String? // nur wenn Status geändert wurde
    newStatus    ClientStatus?       @relation(fields: [newStatusId], references: [id])
    reasonId     String? // z. B. bei Status „notInterested“
    reason       ClientStatusReason? @relation(fields: [reasonId], references: [id])
    followUpDate DateTime? // Wiedervorlage, z. B. bei „später kontaktieren“
    note         String? // Freitext-Eintrag

    creatorId String?
    updatorId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    creator User? @relation("CreatorClientHistories", fields: [creatorId], references: [id])
    updator User? @relation("UpdatorClientHistories", fields: [updatorId], references: [id])

    @@map("client_histories")
}

// ----------------------
// Dolmetscher (Interpreters)
// ----------------------

model Interpreter {
    id                String                     @id @default(cuid())
    code              String                     @unique
    codeNumber        Int                        @unique
    firstName         String?
    lastName          String
    email             String?
    phone1            String?
    phone2            String?
    gender            String?
    birthDate         DateTime?
    street            String?
    zip               String?
    cityId            String?
    city              City?                      @relation(fields: [cityId], references: [id])
    offersRemote      Boolean?                   @default(false)
    offersOnSite      Boolean?                   @default(false)
    defaultHourlyRate Float?
    kmRate            Float?
    availability      String?
    car               Boolean?                   @default(false)
    iban              String?
    startDate         DateTime?
    endDate           DateTime?
    interviewDate     DateTime?
    googleContactId   String?
    googleEventId     String?
    statusId          String                     @default("new")
    status            InterpreterStatus          @relation(fields: [statusId], references: [id])
    notes             String?
    createdAt         DateTime                   @default(now())
    updatedAt         DateTime                   @updatedAt
    preferredCities   InterpreterPreferredCity[]
    languages         InterpreterLanguage[]
    jobs              Job[]

    @@map("interpreters")
}

model InterpreterStatus {
    id           String        @id @default(cuid())
    name         String
    active       Boolean       @default(true)
    sortIndex    Int?
    interpreters Interpreter[]

    @@map("interpreter_statuses")
}

model InterpreterPreferredCity {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    cityId        String
    city          City        @relation(fields: [cityId], references: [id])

    @@map("interpreter_preferred_cities")
}

model InterpreterLanguage {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    languageId    String
    language      Language    @relation(fields: [languageId], references: [id])

    @@map("interpreter_languages")
}

model Job {
    id                     String               @id @default(cuid())
    clientId               String
    client                 Client               @relation(fields: [clientId], references: [id])
    interpreterId          String?
    interpreter            Interpreter?         @relation(fields: [interpreterId], references: [id])
    languageToId           String
    languageTo             Language             @relation("JobToLanguage", fields: [languageToId], references: [id])
    jobTypeId              String?
    jobType                JobType?             @relation(fields: [jobTypeId], references: [id])
    priorityId             String?              @default("medium")
    priority               JobPriority?         @relation(fields: [priorityId], references: [id])
    statusId               String
    status                 JobStatus            @relation(fields: [statusId], references: [id])
    description            String?
    jobDate                DateTime?
    startTime              String?
    endTime                String?
    durationMinutes        Int?
    addressStreet          String?
    addressZip             String?
    addressCityId          String?
    addressCity            City?                @relation(fields: [addressCityId], references: [id])
    fee                    Float?
    interpreterFee         Float?
    code                   String
    codeNumber             Int
    entryDate              DateTime?
    distanceKm             Int?
    kmRateClient           Float?
    kmRateInterpreter      Float?
    surchargeRareLanguage  Float?
    surchargeUrgency       Float?
    rhythmText             String?
    finalPriceClient       Float?
    finalPriceInterpreter  Float?
    invoiceAddress         String?
    notes                  String?
    creatorId              String?
    updatorId              String?
    createdAt              DateTime             @default(now())
    updatedAt              DateTime             @updatedAt
    jobContactperson       JobContactperson[]
    jobMode                JobMode?             @relation(fields: [jobModeId], references: [id])
    jobModeId              String?
    isConfirmedInterpreter Boolean              @default(false)
    isConfirmedClient      Boolean              @default(false)
    jobCompletionStatus    JobCompletionStatus? @relation(fields: [jobCompletionStatusId], references: [id])
    jobCompletionStatusId  String?

    @@map("jobs")
}

model JobMode {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_modes")
}

model JobStatus {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_statuses")
}

model JobCompletionStatus {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_completion_statuses")
}

model JobContactperson {
    id         String  @id @default(cuid())
    salutation String?
    firstName  String?
    lastName   String
    street     String?
    zip        String?
    cityId     String?
    city       City?   @relation(fields: [cityId], references: [id])
    phone      String?
    email      String?
    jobId      String
    job        Job     @relation(fields: [jobId], references: [id])

    @@map("job_contactpersons")
}
