generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// ----------------------
// Stammdaten
// ----------------------

model Language {
    id           String                @id @default(cuid())
    name         String
    active       Boolean               @default(true)
    sortIndex    Int?
    interpreters InterpreterLanguage[]
    jobsTo       Job[]                 @relation("JobToLanguage")

    @@map("languages")
}

model City {
    id                    String                     @id @default(cuid())
    name                  String
    active                Boolean                    @default(true)
    sortIndex             Int?
    interpreters          Interpreter[]
    interpretersPreferred InterpreterPreferredCity[]
    jobs                  Job[]
    clients               Client[]
    clientContactpersons  ClientContactperson[]
    jobContactpersons     JobContactperson[]

    @@map("cities")
}

model JobType {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_types")
}

model JobPriority {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_priorities")
}

// ----------------------
// Users
// ----------------------

model User {
    id    String @id @default(cuid())
    email String @unique
    name  String

    @@map("users")
}

// ----------------------
// Auftraggeber (Clients)
// ----------------------

model Client {
    id                 String                @id @default(cuid())
    name               String
    code               String?
    codeNumber         Int?
    nameShortcut       String?
    typeId             String
    type               ClientType            @relation(fields: [typeId], references: [id])
    statusId           String?
    status             ClientStatus?         @relation(fields: [statusId], references: [id])
    statusReasonId     String?
    statusReason       ClientStatusReason?   @relation(fields: [statusReasonId], references: [id])
    statusFollowUpDate DateTime?
    email              String?
    phone              String?
    street             String?
    zip                String?
    cityId             String?
    city               City?                 @relation(fields: [cityId], references: [id])
    notes              String?
    creatorId          String?
    updatorId          String?
    createdAt          DateTime              @default(now())
    updatedAt          DateTime              @updatedAt
    jobs               Job[]
    contactPersons     ClientContactperson[]

    @@map("clients")
}

enum ClientStatusId {
    new
    contacting
    failedContact
    interested
    offerToSend
    offerSent
    negotiation
    contactLater
    activeWithoutContract
    contracted
    inactive
    notInterested
    blacklisted
}

model ClientStatus {
    id        String   @id @default(cuid())
    name      String
    sortIndex Int?
    active    Boolean  @default(true)
    clients   Client[]

    @@map("client_statuses")
}

model ClientStatusReason {
    id        String   @id @default(cuid())
    name      String
    active    Boolean  @default(true)
    sortIndex Int?
    clients   Client[]

    @@map("client_status_reasons")
}

model ClientType {
    id        String   @id @default(cuid())
    name      String
    active    Boolean  @default(true)
    sortIndex Int?
    clients   Client[]

    @@map("client_types")
}

model ClientContactperson {
    id         String  @id @default(cuid())
    clientId   String
    client     Client  @relation(fields: [clientId], references: [id])
    salutation String?
    firstName  String?
    lastName   String
    street     String?
    zip        String?
    cityId     String?
    city       City?   @relation(fields: [cityId], references: [id])
    phone      String?
    email      String?

    @@map("client_contactpersons")
}

// ----------------------
// Dolmetscher (Interpreters)
// ----------------------

model Interpreter {
    id                String                     @id @default(cuid())
    code              String                     @unique
    codeNumber        Int                        @unique
    firstName         String
    lastName          String
    email             String?
    phone             String?
    gender            String?
    birthDate         DateTime?
    street            String?
    zip               String?
    city              String?
    offersRemote      Boolean
    offersOnSite      Boolean
    defaultHourlyRate Float?
    availability      String?
    iban              String?
    startDate         DateTime?
    endDate           DateTime?
    interviewDate     DateTime?
    googleContactId   String?
    googleEventId     String?
    statusId          String
    status            InterpreterStatus          @relation(fields: [statusId], references: [id])
    notes             String?
    createdAt         DateTime                   @default(now())
    updatedAt         DateTime                   @updatedAt
    preferredCities   InterpreterPreferredCity[]
    languages         InterpreterLanguage[]
    jobs              Job[]
    City              City?                      @relation(fields: [cityId], references: [id])
    cityId            String?

    @@map("interpreters")
}

model InterpreterStatus {
    id           String        @id @default(cuid())
    name         String
    active       Boolean       @default(true)
    sortIndex    Int?
    interpreters Interpreter[]

    @@map("interpreter_statuses")
}

model InterpreterPreferredCity {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    cityId        String
    city          City        @relation(fields: [cityId], references: [id])

    @@map("interpreter_preferred_cities")
}

model InterpreterLanguage {
    id            String      @id @default(cuid())
    interpreterId String
    interpreter   Interpreter @relation(fields: [interpreterId], references: [id])
    languageId    String
    language      Language    @relation(fields: [languageId], references: [id])

    @@map("interpreter_languages")
}

model Job {
    id                    String             @id @default(cuid())
    clientId              String
    client                Client             @relation(fields: [clientId], references: [id])
    interpreterId         String?
    interpreter           Interpreter?       @relation(fields: [interpreterId], references: [id])
    languageToId          String
    languageTo            Language           @relation("JobToLanguage", fields: [languageToId], references: [id])
    jobTypeId             String
    jobType               JobType            @relation(fields: [jobTypeId], references: [id])
    priorityId            String
    priority              JobPriority        @relation(fields: [priorityId], references: [id])
    statusId              String
    status                JobStatus          @relation(fields: [statusId], references: [id])
    description           String?
    jobDate               DateTime
    startTime             DateTime
    endTime               DateTime
    durationMinutes       Int
    mode                  String
    addressStreet         String?
    addressZip            String?
    addressCityId         String
    addressCity           City               @relation(fields: [addressCityId], references: [id])
    fee                   Float?
    interpreterFee        Float?
    code                  String
    codeNumber            Int
    entryDate             DateTime
    distanceKm            Int?
    kmRateClient          Float?
    kmRateInterpreter     Float?
    surchargeRareLanguage Float?
    surchargeUrgency      Float?
    rhythmText            String?
    finalPriceClient      Float?
    finalPriceInterpreter Float?
    invoiceAddress        String?
    notes                 String?
    creatorId             String
    updatorId             String?
    createdAt             DateTime           @default(now())
    updatedAt             DateTime           @updatedAt
    JobContactperson      JobContactperson[]

    @@map("jobs")
}

model JobStatus {
    id        String  @id @default(cuid())
    name      String
    active    Boolean @default(true)
    sortIndex Int?
    jobs      Job[]

    @@map("job_statuses")
}

model JobContactperson {
    id         String  @id @default(cuid())
    salutation String?
    firstName  String?
    lastName   String
    street     String?
    zip        String?
    cityId     String?
    city       City?   @relation(fields: [cityId], references: [id])
    phone      String?
    email      String?
    jobId      String
    job        Job     @relation(fields: [jobId], references: [id])

    @@map("job_contactpersons")
}
